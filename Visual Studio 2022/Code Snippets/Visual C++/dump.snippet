<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>#dump</Title>
			<Shortcut>#dump</Shortcut>
			<Description>崩溃时生成Dump文件的代码片段</Description>
			<Author>LiuMeng</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>filename</ID>
					<Default>main_v1.0.0</Default>
					<ToolTip>文件名</ToolTip>
				</Literal>
			</Declarations>
			<Code Language="cpp"><![CDATA[#ifdef _WIN32
				#pragma region 程序崩溃时生成DUMP文件
				/*
				// head file
				#include <io.h>
				#include <direct.h>
				#include <tchar.h>
				#include <Windows.h>
				#include <DbgHelp.h>
				#include <shellapi.h>
				#include <ShlObj.h>
				#pragma comment(lib, "DbgHelp.Lib")
				#pragma warning(disable:4091)

				// using
				SetUnhandledExceptionFilter(ExceptionFilter);
				*/

				typedef BOOL(WINAPI* MiniDumpWriteDumpT)(
					HANDLE,
					DWORD,
					HANDLE,
					MINIDUMP_TYPE,
					PMINIDUMP_EXCEPTION_INFORMATION,
					PMINIDUMP_USER_STREAM_INFORMATION,
					PMINIDUMP_CALLBACK_INFORMATION
					);

				int GenerateMiniDump(PEXCEPTION_POINTERS pExceptionPointers)
				{
					HMODULE hDbgHelp = LoadLibrary(_T("DbgHelp.dll"));
					if (NULL == hDbgHelp) {
						return EXCEPTION_EXECUTE_HANDLER;
					}

					MiniDumpWriteDumpT pfnMiniDumpWriteDump = (MiniDumpWriteDumpT)GetProcAddress(hDbgHelp, "MiniDumpWriteDump");
					if (NULL == pfnMiniDumpWriteDump) {
						FreeLibrary(hDbgHelp);
						return EXCEPTION_EXECUTE_HANDLER;
					}

					TCHAR szFilePath[MAX_PATH] = _T("CrashDumps");
					TCHAR szFileName[MAX_PATH] = { 0 };
					SYSTEMTIME stLocalTime = { 0 };
					GetLocalTime(&stLocalTime);
					wsprintf(szFileName, _T("%s\\%s-%04d%02d%02d-%02d%02d%02d.dmp"), szFilePath,
						_T("$filename$"), stLocalTime.wYear, stLocalTime.wMonth, stLocalTime.wDay,
						stLocalTime.wHour, stLocalTime.wMinute, stLocalTime.wSecond);

					if (_taccess(szFilePath, 0) != 0) {
						if (_tmkdir(szFilePath) != 0) {
							return EXCEPTION_EXECUTE_HANDLER;
						}
					}
					HANDLE hDumpFile = CreateFile(szFileName, GENERIC_READ | GENERIC_WRITE,
						FILE_SHARE_WRITE | FILE_SHARE_READ, 0, CREATE_ALWAYS, 0, 0);
					if (INVALID_HANDLE_VALUE == hDumpFile) {
						FreeLibrary(hDbgHelp);
						return EXCEPTION_EXECUTE_HANDLER;
					}

					MINIDUMP_EXCEPTION_INFORMATION expParam = { 0 };
					expParam.ThreadId = GetCurrentThreadId();
					expParam.ExceptionPointers = pExceptionPointers;
					expParam.ClientPointers = FALSE;
					pfnMiniDumpWriteDump(GetCurrentProcess(), GetCurrentProcessId(), hDumpFile,
						(MINIDUMP_TYPE)(MiniDumpNormal | MiniDumpWithDataSegs | MiniDumpWithFullMemory),
						(pExceptionPointers ? &expParam : NULL), NULL, NULL);

					CloseHandle(hDumpFile);
					FreeLibrary(hDbgHelp);
					return EXCEPTION_EXECUTE_HANDLER;
				}

				LONG WINAPI ExceptionFilter(LPEXCEPTION_POINTERS lpExceptionInfo)
				{
					if (IsDebuggerPresent()) {
						return EXCEPTION_CONTINUE_SEARCH;
					}
					return GenerateMiniDump(lpExceptionInfo);
				}
				#pragma endregion
				#endif
				$end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
